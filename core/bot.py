from exchanges.binance_client import BinanceClient
from notifications.telegram_notifier import TelegramNotifier
from strategies.rsi_strategy import RSIStrategy
from config.settings import settings
from utils.logger import logger
import time

class TradingBot:
    def __init__(self):
        self.binance = BinanceClient()
        self.notifier = TelegramNotifier()
        self.strategy = RSIStrategy()
        self.symbol = settings.SYMBOL
        self.quantity = settings.TRADE_QUANTITY
        self.interval = settings.BINANCE_INTERVAL
        
        logger.info("Trading Bot initialized")
        self.notifier.send_message("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    def get_market_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.binance.get_klines(
            symbol=self.symbol,
            interval=self.interval,
            limit=100
        )
    
    def check_position(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        asset = self.symbol.replace('USDT', '')
        balance = self.binance.get_balance(asset)
        return balance > 0.0001
    
    def execute_trade(self, signal: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        if signal == 'BUY':
            result = self.binance.create_test_order(
                symbol=self.symbol,
                side='BUY',
                quantity=self.quantity
            )
            if result:
                message = f"‚úÖ –¢–ï–°–¢–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê\n–°–∏–º–≤–æ–ª: {self.symbol}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.quantity}"
                self.notifier.send_message(message)
                logger.info(message)
        elif signal == 'SELL':
            result = self.binance.create_test_order(
                symbol=self.symbol,
                side='SELL',
                quantity=self.quantity
            )
            if result:
                message = f"‚úÖ –¢–ï–°–¢–û–í–ê–Ø –ü–†–û–î–ê–ñ–ê\n–°–∏–º–≤–æ–ª: {self.symbol}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.quantity}"
                self.notifier.send_message(message)
                logger.info(message)
    
    def run_strategy(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = self.get_market_data()
            if data is None or data.empty:
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            analysis = self.strategy.analyze(data)
            signal = analysis['signal']
            confidence = analysis['confidence']
            details = analysis['details']
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞–Ω–∞–ª–∏–∑–µ
            message = (
                f"üìä –ê–Ω–∞–ª–∏–∑ {self.symbol}\n"
                f"–¶–µ–Ω–∞: ${details.get('price', 0)}\n"
                f"RSI: {details.get('rsi', 0)}\n"
                f"–°–∏–≥–Ω–∞–ª: {signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.0f}%)"
            )
            self.notifier.send_message(message)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            if signal in ['BUY', 'SELL']:
                has_position = self.check_position()
                
                # –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
                if (signal == 'BUY' and not has_position) or (signal == 'SELL' and has_position):
                    self.execute_trade(signal)
                else:
                    logger.info(f"–°–∏–≥–Ω–∞–ª {signal} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞/–∑–∞–∫—Ä—ã—Ç–∞")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}"
            logger.error(error_msg)
            self.notifier.send_message(error_msg)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting trading bot...")
        while True:
            try:
                self.run_strategy()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except KeyboardInterrupt:
                logger.info("Bot stopped by user")
                self.notifier.send_message("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                break
            except Exception as e:
                error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
                logger.error(error_msg)
                self.notifier.send_message(error_msg)
                time.sleep(60)